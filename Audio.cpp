#include "Audio.h"

HWAVEIN hWaveIn;
WAVEFORMATEX waveform;
WAVEHDR waveHdr;


MMRESULT result;
// Инициализация структуры для буфера с аудиоданными
WAVEHDR waveOutHdr;
// Открытие устройства воспроизведения
HWAVEOUT hWaveOut;
// Определение структуры для воспроизведения звука
WAVEFORMATEX waveFormat;


bool Out = false;

#include <vector>

void playAudioFromBuffer(WAVEHDR Buffer)
{
    waveOutHdr.lpData = Buffer.lpData; // Используем буфер, заполненный в waveInProc
    waveOutHdr.dwBufferLength = Buffer.dwBufferLength;
    waveOutHdr.dwFlags = 0;
    waveOutHdr.dwLoops = 0;

    result = waveOutPrepareHeader(hWaveOut, &waveOutHdr, sizeof(WAVEHDR));
    if (result != MMSYSERR_NOERROR) {
        std::cerr << "Failed to prepare audio header for playback." << std::endl;
        waveOutClose(hWaveOut);
        return;
    }
   
    result = waveOutWrite(hWaveOut, &waveOutHdr, sizeof(WAVEHDR));
    if (result != MMSYSERR_NOERROR) {
        std::cerr << "Failed to start audio playback." << std::endl;
        waveOutUnprepareHeader(hWaveOut, &waveOutHdr, sizeof(WAVEHDR));
        waveOutClose(hWaveOut);
        return;
    }

    // Ждем, пока звук воспроизводится
    //Sleep(waveHdr.dwBufferLength / waveFormat.nSamplesPerSec * 1000);
}


// Функция для применения фильтра Баттерворта к сигналу
//void applyButterworthFilter(WAVEHDR& waveHdr, const std::vector<double>& bCoeffs, const std::vector<double>& aCoeffs) {
//    // Создаем временный буфер для хранения исходных данных
//    std::vector<char> tempBuffer(waveHdr.dwBytesRecorded);
//    std::copy(waveHdr.lpData, waveHdr.lpData + waveHdr.dwBytesRecorded, tempBuffer.begin());
//
//    // Применяем фильтр ФВЧ к каждому сэмплу
//    for (int i = 0; i < waveHdr.dwBytesRecorded; ++i) {
//        double output = 0.0;
//        if (i >= 2) { // Начинаем с 2-го сэмпла, так как для вычисления фильтрованного сэмпла нам нужны предыдущие сэмплы
//            output = aCoeffs[0] * tempBuffer[i]
//                + aCoeffs[1] * tempBuffer[i - 1]
//                + aCoeffs[2] * tempBuffer[i - 2]
//                + bCoeffs[1] * waveHdr.lpData[i - 1]
//                + bCoeffs[2] * waveHdr.lpData[i - 2];
//        }
//
//        // Ограничиваем значения сэмплов, чтобы они оставались в диапазоне [-128, 127]
//        if (output > 127) {
//            waveHdr.lpData[i] = static_cast<char>(output)/127;
//        }
//        else if (output < -128) {
//            waveHdr.lpData[i] = static_cast<char>(output) / 128;
//        }
//        else {
//            waveHdr.lpData[i] = static_cast<char>(output);
//        }
//    }
//}
void applyButterworthFilter(WAVEHDR& waveHdr, const std::vector<double>& bCoeffs, const std::vector<double>& aCoeffs) {
    std::vector<double> x(waveHdr.dwBytesRecorded);
    std::vector<double> y(waveHdr.dwBytesRecorded);
    //cout << "x: " << x[0] << " y: " << y[0] << endl;
    // Создаем временный буфер для хранения исходных данных
    for (int i = 0; i < waveHdr.dwBytesRecorded; ++i) {
        //cout << "waveHdr.lpData[i] " << double(waveHdr.lpData[i]) << ", ";
        x[i] = waveHdr.lpData[i];
        //cout << double(waveHdr.lpData[i]) << ", ";
        //cout << "x[i] " << x[i] << endl;
    }

    // Применяем фильтр Баттерворта к каждому сэмплу
    for (int n = 0; n < waveHdr.dwBytesRecorded; n++) {
        //cout << "y[n] 1 : " << y[n] << "    " << endl;
        //cout << y[9] << endl;ьтр только к данным после первых 8 элементов
        for (int q = 0; q < bCoeffs.size(); ++q) {
            int k = q * 2;
            if (n - k < 0) {
                y[n] += bCoeffs[q] * 0;
            }
            else {
                y[n] += bCoeffs[q] * x[n - k];
            }
        }

        for (int w = 1; w < aCoeffs.size(); ++w) {
            int m = w * 2;
            if (n - m < 0) {
                y[n] -= aCoeffs[w] * 0;
            }
            else {
                y[n] -= aCoeffs[w] * y[n - m];
            }
        }

        //cout << "y[" << n << "]: " << y[n] << endl;
        //cout << y[n] << ", ";
    }
    for (int i = 0; i < waveHdr.dwBytesRecorded; ++i) {
        //cout << ", " << y[i];
        //cout << "waveHdr.lpData(1): " << double(waveHdr.lpData[i]) << endl;
        waveHdr.lpData[i] = y[i];
        //cout << "waveHdr.lpData(2): " << double(waveHdr.lpData[i]) << endl;
    }
    //Sleep(3000);
}

void applyKIHFilter(WAVEHDR& waveHdr, const std::vector<double>& bCoeffs) {
    std::vector<double> x(waveHdr.dwBytesRecorded);//{ 69, 3, 34, 3, -6, 2, -47, 2, -90, 2, 119, 2, 71, 2, 22, 2, -29, 1, -82, 1, 118, 1, 64, 1, 7, 1, -50, 0, -109, 0, 89, 0, 29, 0, -31, -1, -89, -1, 107, -1, 49, -1, -8, -2, -65, -2, -121, -2, 80, -2, 27, -2, -24, -3, -74, -3, -122, -3, 89, -3, 45, -3, 4, -3, -34, -4, -71, -4, -102, -4, 123, -4, 96, -4, 72, -4, 51, -4, 33, -4, 19, -4, 8, -4, 0, -4, -4, -5, -5, -5, -4, -5, 3, -4, 11, -4, 25, -4, 41, -4, 60, -4, 83, -4, 108, -4, -120, -4, -88, -4, -53, -4, -16, -4, 24, -3, 66, -3, 110, -3, -99, -3, -51, -3, 0, -2, 52, -2, 106, -2, -95, -2, -39, -2, 18, -1, 78, -1, -120, -1, -63, -1, -3, -1, 57, 0, 116, 0, -82, 0, -24, 0, 34, 1, 90, 1, -111, 1, -57, 1, -5, 1, 46, 2, 95, 2, -114, 2, -71, 2, -27, 2, 13, 3, 50, 3, 84, 3, 116, 3, -111, 3, -85, 3, -63, 3, -44, 3, -27, 3, -14, 3, -5, 3, 2, 4, 3, 4, 4, 4, -1, 3, -8, 3, -19, 3, -33, 3, -50, 3, -71, 3, -96, 3, -122, 3, 104, 3, 71, 3, 36, 3, -2, 2, -43, 2, -85, 2, 124, 2, 77, 2, 27, 2, -24, 1, -77, 1, 124, 1, 70, 1, 12, 1, -46, 0, -104, 0, 93, 0, 34, 0, -24, -1, -84, -1, 113, -1, 54, -1, -2, -2, -59, -2, -116, -2, 85, -2, 32, -2, -20, -3, -69, -3, -117, -3, 93, -3, 49, -3, 9, -3, -30, -4, -66, -4, -100, -4, 126, -4, 97, -4, 74, -4, 53, -4, 35, -4, 19, -4, 8, -4, 1, -4, -4, -5, -5, -5, -3, -5, 2, -4, 11, -4, 24, -4, 39, -4, 58, -4, 80, -4, 106, -4, -122, -4, -91, -4, -57, -4, -20, -4, 20, -3, 62, -3, 106, -3, -104, -3, -55, -3, -5, -3, 48, -2, 102, -2, -99, -2, -44, -2, 12, -1, 71, -1, -126, -1, -67, -1, -8, -1, 51, 0, 110, 0, -86, 0, -30, 0, 28, 1, 85, 1, -116, 1, -62, 1, -9, 1, 42, 2, 92, 2, -118, 2, -75, 2, -31, 2, 9, 3, 47, 3, 81, 3, 113, 3, -114, 3, -88, 3, -65, 3, -46, 3, -28, 3, -15, 3, -5, 3, 1, 4, 5, 4, 4, 4, 0, 4, -7, 3, -18, 3, -31, 3, -50, 3, -68, 3, -91, 3, -119, 3, 107, 3, 75, 3, 39, 3, 2, 3, -39, 2, -82, 2, -128, 2, 81, 2, 32, 2, -20, 1, -72, 1, -127, 1, 74, 1, 17, 1, -40, 0, -99, 0, 100, 0, 39, 0, -20, -1, -79, -1, 118, -1, 60, -1, 2, -1, -54, -2, -111, -2, 90, -2, 37, -2, -15, -3, -65, -3, -113, -3, 97, -3, 53, -3, 12, -3, -27, -4, -63, -4, -97, -4, 127, -4, 101, -4, 76, -4, 54, -4, 36, -4, 20, -4, 9, -4, 1, -4, -4, -5, -5, -5, -4, -5, 2, -4, 10, -4, 23, -4, 38, -4, 56, -4, 78, -4, 103, -4, -125, -4, -95, -4, -59, -4, -23, -4, 16, -3, 58, -3, 102, -3, -108, -3, -60, -3, -9, -3, 42, -2, 96, -2, -105, -2, -49, -2, 8, -1, 66, -1, 123, -1, -73, -1, -14, -1, 46, 0, 105, 0, -92, 0, -34, 0, 23, 1, 80, 1, -121, 1, -67, 1, -14, 1, 38, 2, 86, 2, -123, 2, -78, 2, -35, 2, 5, 3, 43, 3, 78, 3, 111, 3, -116, 3, -90, 3, -67, 3, -46, 3, -30, 3, -16, 3, -6, 3, 1, 4, 4, 4, 4, 4, 1, 4, -6, 3, -16, 3, -31, 3, -47, 3, -67, 3, -89, 3, -117, 3, 110, 3, 78, 3, 43, 3, 5, 3, -36, 2, -78, 2, -122, 2, 85, 2, 36, 2, -15, 1, -67, 1, -122, 1, 79, 1, 21, 1, -35, 0, -92, 0, 104, 0, 45, 0, -14, -1, -74, -1, 124, -1, 65, -1, 7, -1, -50, -2, -107, -2, 95, -2, 42, -2, -10, -3, -60, -3, -109, -3, 101, -3, 57, -3, 15, -3, -23, -4, -60, -4, -95, -4, -125, -4, 104, -4, 78, -4, 56, -4, 37, -4, 22, -4, 10, -4, 2, -4, -3, -5, -6, -5, -4, -5, 1, -4, 10, -4, 21, -4, 37, -4, 55, -4, 76, -4, 101, -4, -127, -4, -97, -4, -63, -4, -27, -4, 12, -3, 53, -3, 98, -3, -112, -3, -64, -3, -14, -3, 38, -2, 91, -2, -110, -2, -54, -2, 3, -1, 62, -1, 119, -1, -78, -1, -19, -1, 40, 0, 99, 0, -97, 0, -39, 0, 18, 1, 76, 1, -126, 1, -70, 1, -20, 1, 32, 2, 82, 2, -127, 2, -82, 2, -39, 2, 2, 3, 40, 3, 75, 3, 107, 3, -119, 3, -93, 3, -70, 3, -48, 3, -31, 3, -17, 3, -7, 3, 0, 4, 4, 4, 4, 4, 1, 4, -5, 3, -15, 3, -30, 3, -45, 3, -66, 3, -88, 3, -114, 3, 113, 3, 81, 3, 46, 3, 8, 3, -33, 2, -74, 2, -119, 2, 90, 2, 41, 2, -10, 1, -63, 1, -117, 1, 84, 1, 28, 1, -30, 0, -88, 0, 109, 0, 50, 0, -9, -1, -68, -1, -127, -1, 70, -1, 13, -1, -44, -2, -101, -2, 99, -2, 46, -2, -6, -3, -56, -3, -104, -3, 105, -3, 61, -3, 19, -3, -20, -4, -57, -4, -91, -4, -122, -4, 105, -4, 80, -4, 58, -4, 39, -4, 24, -4, 12, -4, 2, -4, -3, -5, -5, -5, -4, -5, 1, -4, 10, -4, 20, -4, 35, -4, 53, -4, 74, -4, 99, -4, 126, -4, -99, -4, -67, -4, -31, -4, 9, -3, 50, -3, 94, -3, -117, -3, -69, -3, -20, -3, 32, -2, 86, -2, -115, -2, -59, -2, -3, -2, 56, -1, 114, -1, -83, -1, -25, -1, 35, 0, 94, 0, -103, 0, -45, 0, 13, 1, 70, 1, 125, 1, -76, 1, -23, 1, 28, 2, 77, 2, 125, 2, -86, 2, -42, 2, -2, 2, 37, 3, 73, 3, 105, 3, -121, 3, -95, 3, -71, 3, -50, 3, -33, 3, -18, 3, -8, 3, 0, 4, 5, 4, 4, 4, 1, 4, -6, 3, -15, 3, -27, 3, -44, 3, -63, 3, -86, 3, -113, 3, 116, 3, 84, 3, 49, 3, 12, 3, -28, 2, -69, 2, -115, 2, 94, 2, 46, 2, -5, 1, -57, 1, -112, 1, 89, 1, 33, 1, -25, 0, -83, 0, 115, 0, 55, 0, -4, -1, -63, -1, -122, -1, 76, -1, 18, -1, -40, -2, -95, -2, 105, -2, 51, -2, -1, -3, -51, -3, -100, -3, 109, -3, 64, -3, 22, -3, -17, -4, -55, -4, -88, -4, -120, -4, 108, -4, 82, -4, 60, -4, 41, -4, 25, -4, 12, -4, 3, -4, -3, -5, -5, -5, -4, -5, 0, -4, 8, -4, 18, -4, 33, -4, 51, -4, 72, -4, 96, -4, 124, -4, -102, -4, -69, -4, -34, -4, 5, -3, 46, -3, 90, -3, -121, -3, -73, -3, -23, -3, 28, -2, 80, -2, -119, -2, -65, -2, -8, -2, 50, -1, 108, -1, -89, -1, -30, -1, 30, 0, 89, 0, -108, 0, -49, 0, 8, 1, 65, 1, 120, 1, -81, 1, -28, 1, 24, 2, 72, 2, 121, 2, -90, 2, -46, 2, -5, 2, 33, 3, 69, 3, 102, 3, -124, 3, -97, 3, -73, 3, -53, 3, -34, 3, -20, 3, -9, 3, -1, 3, 4, 4, 5, 4, 2, 4, -3, 3, -13, 3, -26, 3, -42, 3, -61, 3, -84, 3, -109, 3, 118, 3, 87, 3, 52, 3, 15, 3, -25, 2, -67, 2, -112, 2, 98, 2, 50, 2, -1, 1, -53, 1, -107, 1, 94, 1, 37, 1, -19, 0, -77, 0, 120, 0, 61, 0, 2, 0, -58, -1, -116, -1, 80, -1, 23, -1, -33, -2, -91, -2, 110, -2, 57, -2, 4, -2, -47, -3, -97, -3, 113, -3, 68, -3, 26, -3, -13, -4, -51, -4, -86, -4, -117, -4, 111, -4, 83, -4, 62, -4, 42, -4, 26, -4, 13, -4, 3, -4, -2, -5, -4, -5, -5, -5, -1, -5, 8, -4, 19, -4, 32, -4, 50, -4, 69, -4, 94, -4, 121, -4, -104, -4, -72, -4, -37, -4, 0, -3, 43, -3, 85, -3, -125, -3, -76, -3, -28, -3, 23, -2, 76, -2, -125, -2, -69, -2, -13, -2, 45, -1, 103, -1, -94, -1, -34, -1, 24, 0, 82, 0, -114, 0, -56, 0, 3, 1, 60, 1, 115, 1, -85, 1, -34, 1, 19, 2, 70, 2, 116, 2, -94, 2, -50, 2, -9, 2, 30, 3, 65, 3, 99, 3, -126, 3, -99, 3, -75, 3, -53, 3, -35, 3, -21, 3, -9, 3, -1, 3, 3, 4, 3, 4, 2, 4, -2, 3, -12, 3, -24, 3, -40, 3, -60, 3, -81, 3, -107, 3, 122, 3, 90, 3, 56, 3, 19, 3, -21, 2, -63, 2, -107, 2, 102, 2, 54, 2, 3, 2, -48, 1, -102, 1, 99, 1, 43, 1, -14, 0, -72, 0, 125, 0, 67, 0, 7, 0, -51, -1, -111, -1, 86, -1, 28, -1, -29, -2, -86, -2, 114, -2, 61, -2, 8, -2, -42, -3, -91, -3, 118, -3, 72, -3, 30, -3, -10, -4, -47, -4, -82, -4, -114, -4, 113, -4, 88, -4, 64, -4, 44, -4, 28, -4, 14, -4, 5, -4, -2, -5, -5, -5, -5, -5, -1, -5, 6, -4, 17, -4, 30, -4, 48, -4, 68, -4, 91, -4, 118, -4, -107, -4, -76, -4, -40, -4, -2, -4, 38, -3, 81, -3, 127, -3, -82, -3, -33, -3, 19, -2, 71, -2, 126, -2, -75, -2, -18, -2, 40, -1, 98, -1, -100, -1, -39, -1, 19, 0, 78, 0, -119, 0, -62, 0, -3, 0, 54, 1, 110, 1, -90, 1, -38, 1, 14, 2, 64, 2, 111, 2, -98, 2, -54, 2, -13, 2, 26, 3, 64, 3, 97, 3, 127, 3, -100, 3, -77, 3, -55, 3, -38, 3, -22, 3, -11, 3, -2, 3, 3, 4, 5, 4, 3, 4, -3, 3, -11, 3, -23, 3, -39, 3, -57, 3, -79, 3, -104, 3, 124, 3, 93, 3, 60, 3, 22, 3, -17, 2, -59, 2, -103, 2, 107, 2, 59, 2, 9, 2, -43, 1, -97, 1, 104, 1, 48, 1, -9, 0, -67, 0, -125, 0, 72, 0, 12, 0, -47, -1, -106, -1, 93, -1, 33, -1, -24, -2, -81, -2, 121, -2, 66, -2, 13, -2, -38, -3, -87, -3, 122, -3, 77, -3, 34, -3, -6, -4, -43, -4, -78, -4, -111, -4, 115, -4, 90, -4, 66, -4, 46, -4, 29, -4, 15, -4, 5, -4, -1, -5, -5, -5, -5, -5, -2, -5, 6, -4, 16, -4, 28, -4, 45, -4, 66, -4, 89, -4, 116, -4, -111, -4, -79, -4, -43, -4, -6, -4, 36, -3, 78, -3, 122, -3, -86, -3, -36, -3, 14, -2, 66, -2, 121, -2, -81, -2, -23, -2, 34, -1, 91, -1, -105, -1, -46, -1, 13, 0, 72, 0, -124, 0, -66, 0, -8, 0, 49, 1, 105, 1, -96, 1, -43, 1, 9, 2, 61, 2, 107, 2, -102, 2, -58, 2, -16, 2, 23, 3, 58, 3, 93, 3, 124, 3, -104, 3, -79, 3, -57, 3, -38, 3, -23, 3, -11, 3, -3, 3, 3, 4, 5, 4, 3, 4, -2, 3, -10, 3, -21, 3, -36, 3, -56, 3, -77, 3, -102, 3, 126, 3, 96, 3, 62, 3, 26, 3, -13, 2, -55, 2, -98, 2, 111, 2, 62, 2, 13, 2, -39, 1, -92, 1, 109, 1, 53, 1, -4, 0, -62, 0, -120, 0, 77, 0, 18, 0, -40, -1, -100, -1, 98, -1, 40, -1, -18, -2, -76, -2, 125, -2, 71, -2, 18, -2, -33, -3, -83, -3, 126, -3, 81, -3, 38, -3, -3, -4, -41, -4, -76, -4, -110, -4, 118, -4, 91, -4, 68, -4, 46, -4, 30, -4, 15, -4, 6, -4, -1, -5, -5, -5, -5, -5, -2, -5, 5, -4, 14, -4, 27, -4, 45, -4, 64, -4, 88, -4, 113, -4, -114, -4, -82, -4, -47, -4, -8, -4, 32, -3, 73, -3, 117, -3, -91, -3, -41, -3, 8, -2, 62, -2, 116, -2, -85, -2, -28, -2, 29, -1, 87, -1, -110, -1, -51, -1, 8, 0, 67, 0, 126, 0, -71, 0, -13, 0, 45, 1, 99, 1, -101, 1, -47, 1, 5, 2, 55, 2, 104, 2, -106, 2, -62, 2, -21, 2, 20, 3, 55, 3, 90, 3, 122, 3, -106, 3, -81, 3, -59, 3, -41, 3, -25, 3, -11, 3, -3, 3, 2, 4, 4, 4, 4, 4, -1, 3, -10, 3, -21, 3, -36, 3, -54, 3, -75, 3, -99, 3, -127, 3, 99, 3, 65, 3, 29, 3, -10, 2, -51, 2, -94, 2, 117, 2, 68, 2, 19, 2, -34, 1, -88, 1, 113, 1, 57, 1, 2, 1, -56, 0, -115, 0, 82, 0, 23, 0, -36, -1, -95, -1, 101, -1, 44, -1, -14, -2, -70, -2, -127, -2, 76, -2, 24, -2, -29, -3, -78, -3, -126, -3, 85, -3, 42, -3, 1, -3, -37, -4, -74, -4, -106, -4, 120, -4, 93, -4, 70, -4, 49, -4, 32, -4, 17, -4, 7, -4, -1, -5, -5, -5, -5, -5, -2, -5, 4, -4, 13, -4, 26, -4, 43, -4, 62, -4, 85, -4, 111, -4, -116, -4, -85, -4, -50, -4, -12, -4, 27, -3, 70, -3, 114, -3, -95, -3, -46, -3, 6, -2, 57, -2, 111, -2, -91, -2, -33, -2, 24, -1, 81, -1, -116, -1, -56, -1, 2, 0, 62, 0, 121, 0, -76, 0, -18, 0, 38, 1, 95, 1, -106, 1, -52, 1, 0, 2, 52, 2, 99, 2, -110, 2, -66, 2, -23, 2, 16, 3, 53, 3, 88, 3, 118, 3, -109, 3, -83, 3, -61, 3, -42, 3, -26, 3, -13, 3, -5, 3, 2, 4, 5, 4, 3, 4, -1, 3, -9, 3, -19, 3, -35, 3, -52, 3, -73, 3, -97, 3, -125, 3, 101, 3, 68, 3, 33, 3, -7, 2, -47, 2, -89, 2, 120, 2, 71, 2, 22, 2, -29, 1, -83, 1, 118, 1, 64, 1, 7, 1, -51, 0, -109, 0, 87, 0, 28, 0, -31, -1, -90, -1, 107, -1, 49, -1, -9, -2, -65, -2, -121, -2, 80, -2, 27, -2, -24, -3, -73, -3, -122, -3, 88, -3, 45, -3, 5, -3, -34, -4, -69, -4, -103, -4, 123, -4, 96, -4, 71, -4, 51, -4, 33, -4, 19, -4, 8, -4, 0, -4, -4, -5, -6, -5, -2, -5, 3, -4, 12, -4, 25, -4, 41, -4, 61, -4, 83, -4, 108, -4, -119, -4, -89, -4, -53, -4, -15, -4, 23, -3, 65, -3, 110, -3, -99, -3, -51, -3, 0, -2, 52, -2, 106, -2, -95, -2, -39, -2, 18, -1, 78, -1, -122, -1, -62, -1, -2, -1, 56, 0, 116, 0, -82, 0, -24, 0, 34, 1, 90, 1, -111, 1, -57, 1, -5, 1, 46, 2, 95, 2, -114, 2, -70, 2, -27, 2, 12, 3, 51, 3, 84, 3, 116, 3, -111, 3, -85, 3, -64, 3, -42, 3, -27, 3, -14, 3, -5, 3, 2, 4, 4, 4, 4, 4, 0, 4, -8, 3, -19, 3, -33, 3, -50, 3, -71, 3, -96, 3, -122, 3, 104, 3, 72, 3, 35, 3, -2, 2, -43, 2, -85, 2, 125, 2, 77, 2, 27, 2, -24, 1, -77, 1, 123, 1, 69, 1, 13, 1, -46, 0, -105, 0, 93, 0, 34, 0, -25, -1, -84, -1, 112, -1, 54, -1, -3, -2, -60, -2, -116, -2, 85, -2, 31, -2, -21, -3, -69, -3, -117, -3, 93, -3, 49, -3, 9, -3, -31, -4, -67, -4, -100, -4, 126, -4, 97, -4, 74, -4, 53, -4, 35, -4, 20, -4, 9, -4, 0, -4, -4, -5, -5, -5, -2, -5, 2, -4, 10, -4, 24, -4, 39, -4, 57, -4, 81, -4, 106, -4, -122, -4, -91, -4, -57, -4, -20, -4, 20, -3, 62, -3, 106, -3, -104, -3, -55, -3, -4, -3, 47, -2, 101, -2, -100, -2, -44, -2, 12, -1, 70, -1, -126, -1, -68, -1, -8, -1, 51, 0, 110, 0, -88, 0, -29, 0, 28, 1, 85, 1, -116, 1, -61, 1, -8, 1, 41, 2, 90, 2, -119, 2, -75, 2, -32, 2, 9, 3, 47, 3, 80, 3, 113, 3, -114, 3, -89, 3, -65, 3, -45, 3, -29, 3, -14, 3, -6, 3, 1, 4, 4, 4, 3, 4, 0, 4, -7, 3, -18, 3, -31, 3, -49, 3, -69, 3, -92, 3, -118, 3, 107, 3, 75, 3, 38, 3, 2, 3, -38, 2, -82, 2, -128, 2, 81, 2, 32, 2, -20, 1, -72, 1, -127, 1, 74, 1, 17, 1, -39, 0, -99, 0, 99, 0, 39, 0, -20, -1, -79, -1, 118, -1, 59, -1, 2, -1, -55, -2, -112, -2, 90, -2, 37, -2, -14, -3, -65, -3, -113, -3, 98, -3, 53, -3, 12, -3, -27, -4, -63, -4, -97, -4, -128, -4, 101, -4, 76, -4, 54, -4, 36, -4, 22, -4, 8, -4, 1, -4, -4, -5, -5, -5, -2, -5, 2, -4, 10, -4, 23, -4, 38, -4, 57, -4, 78, -4, 103, -4, -126, -4, -94, -4, -60, -4, -23, -4, 16, -3, 59, -3, 102, -3, -108, -3, -59, -3, -9, -3, 42, -2, 96, -2, -104, -2, -49, -2, 8, -1, 66, -1, 124, -1, -73, -1, -12, -1, 46, 0, 105, 0, -92, 0, -34, 0, 23, 1, 80, 1, -121, 1, -66, 1, -14, 1, 37, 2, 86, 2, -123, 2, -79, 2, -35, 2, 5, 3, 42, 3, 77, 3, 111, 3, -117, 3, -90, 3, -67, 3, -46, 3, -29, 3, -15, 3, -6, 3, 1, 4, 4, 4, 3, 4, 2, 4, -6, 3, -16, 3, -30, 3, -47, 3, -66, 3, -90, 3, -116, 3, 110, 3, 78, 3, 44, 3, 6, 3, -36, 2, -78, 2, -123, 2, 85, 2, 36, 2, -16, 1, -68, 1, -122, 1, 79, 1, 21, 1, -35, 0, -93, 0, 105, 0, 45, 0, -14, -1, -74, -1, 123, -1, 66, -1, 7, -1, -49, -2, -106, -2, 95, -2, 42, -2, -10, -3, -61, -3, -109, -3, 101, -3, 57, -3, 15, -3, -24, -4, -61, -4, -94, -4, -125, -4, 103, -4, 79, -4, 57, -4, 38, -4, 22, -4, 9, -4, 2, -4, -4, -5, -4, -5, -4, -5, 1, -4, 9, -4, 22, -4, 36, -4, 55, -4, 76, -4, 101, -4, -128, -4, -97, -4, -63, -4, -27, -4, 12, -3, 54, -3, 98, -3, -112, -3, -64, -3, -14, -3, 38, -2, 91, -2, -109, -2, -54, -2, 3, -1, 61, -1, 118, -1, -78, -1, -18, -1, 40, 0, 99, 0, -97, 0, -41, 0, 18, 1, 74, 1, -127, 1, -71, 1, -19, 1, 32, 2, 82, 2, -127, 2, -82, 2, -39, 2, 2, 3, 39, 3, 75, 3, 107, 3, -118, 3, -92, 3, -68, 3, -47, 3, -31, 3, -17, 3, -7, 3, 0, 4, 4, 4, 4, 4, 1, 4, -5, 3, -15, 3, -29, 3, -45, 3, -65, 3, -88, 3, -114, 3, 114, 3, 81, 3, 45, 3, 8, 3, -32, 2, -74, 2, -119, 2, 90, 2, 41, 2, -11, 1, -63, 1, -117, 1, 83, 1, 28, 1, -30, 0, -88, 0, 109, 0, 50, 0, -9, -1, -68, -1, -126, -1, 71, -1, 12, -1, -45, -2, -101, -2, 100, -2, 46, -2, -6, -3, -56, -3, -105, -3, 105, -3, 61, -3, 19, -3, -20, -4, -57, -4, -91, -4, -123, -4, 104, -4, 80, -4, 58, -4, 39, -4, 24, -4, 11, -4, 3, -4, -3, -5, -4, -5, -5, -5, 1, -4, 9, -4, 19, -4, 35, -4, 53, -4, 74, -4, 100, -4, 126, -4, -100, -4, -66, -4, -30, -4, 9, -3, 50, -3, 94, -3, -116, -3, -69, -3, -18, -3, 33, -2, 86, -2, -115, -2, -60, -2, -3, -2, 55, -1, 114, -1, -83, -1, -24, -1, 36, 0, 94, 0, -104, 0, -45, 0, 13, 1, 70, 1, 125, 1, -75, 1, -23, 1, 27, 2, 77, 2, 125, 2, -86, 2, -42, 2, -2, 2, 38, 3, 72, 3, 105, 3, -121, 3, -94, 3, -71, 3, -50, 3, -33, 3, -18, 3, -8, 3, 0, 4, 5, 4, 4, 4, 1, 4, -5, 3, -14, 3, -27, 3, -44, 3, -63, 3, -86, 3, -112, 3, 116, 3, 84, 3, 49, 3, 12, 3, -29, 2, -71, 2, -115, 2, 94, 2, 45, 2, -5, 1, -58, 1, -112, 1, 88, 1, 33, 1, -25, 0, -84, 0, 115, 0, 56, 0, -4, -1, -63, -1, -122, -1, 76, -1, 18, -1, -40, -2, -96, -2, 105, -2, 51, -2, -1, -3, -51, -3, -100, -3, 109, -3, 65, -3, 23, -3, -18, -4, -54, -4, -88, -4, -119, -4, 108, -4, 82, -4, 59, -4, 42, -4, 25, -4, 12, -4, 3, -4, -3, -5, -5, -5, -4, -5, 0, -4, 8, -4, 19, -4, 33, -4, 50, -4, 73, -4, 96, -4, 123, -4, -103, -4, -69, -4, -33, -4, 5, -3, 47, -3, 90, -3, -122, -3, -73, -3, -23, -3, 28, -2, 81, -2, -120, -2, -64, -2, -8, -2, 51, -1, 107, -1, -89, -1, -31, -1, 30, 0, 88, 0, -109, 0, -50, 0, 8, 1, 64, 1, 121, 1, -81, 1, -28, 1, 23, 2, 73, 2, 121, 2, -89, 2, -46, 2, -6, 2, 32, 3, 69, 3, 102, 3, -124, 3, -97, 3, -73, 3, -52, 3, -34, 3, -21, 3, -9, 3, -2, 3, 4, 4, 5, 4, 2, 4, -4, 3, -13, 3, -26, 3, -41, 3, -61, 3, -84, 3, -109, 3, 118, 3, 87, 3, 51, 3, 14, 3, -24, 2, -66, 2, -111, 2, 98, 2, 49, 2, -1, 1, -52, 1, -107, 1, 95, 1, 38, 1, -19, 0, -77, 0, 120, 0, 60, 0, 2, 0, -57, -1, -117, -1, 80, -1, 23, -1, -34, -2, -91, -2, 110, -2, 56, -2, 4, -2, -47, -3, -96, -3, 112, -3, 69, -3, 26, -3, -13, -4, -50, -4, -85, -4, -116, -4, 110, -4, 83, -4, 62, -4, 43, -4, 26, -4, 13, -4, 3, -4, -2, -5, -5, -5, -5, -5, 0, -4, 7, -4, 18, -4, 33, -4, 49, -4, 71, -4, 94, -4, 121, -4, -105, -4, -72, -4, -37, -4, 2, -3, 42, -3, 86, -3, -125, -3, -77, -3, -28, -3, 24, -2, 76, -2, -125, -2, -70, -2, -13, -2, 45, -1, 102, -1, -94, -1, -35, -1, 24, 0, 83, 0, -114, 0, -55, 0, 3, 1, 59, 1, 115, 1, -87, 1, -33, 1, 19, 2, 68, 2, 116, 2, -94, 2, -50, 2, -9, 2, 30, 3, 66, 3, 99, 3, -125, 3, -99, 3, -74, 3, -53, 3, -36, 3, -20, 3, -9, 3, -1, 3, 4, 4, 4, 4, 2, 4, -2, 3, -12, 3, -25, 3, -39, 3, -59, 3, -81, 3, -107, 3, 121, 3, 90, 3, 56, 3, 19, 3, -21, 2, -63, 2, -107, 2, 103, 2, 55, 2, 4, 2, -48, 1, -103, 1, 99, 1, 43, 1, -15, 0, -72, 0, 124, 0, 66, 0, 7, 0, -51, -1, -110, -1, 86, -1, 28, -1, -29, -2, -87, -2, 115, -2, 61, -2, 8, -2, -42, -3, -91, -3, 118, -3, 74, -3, 30, -3, -10, -4, -48, -4, -82, -4, -114, -4, 113, -4, 87, -4, 63, -4, 44, -4, 28, -4, 14, -4, 4, -4, -2, -5, -5, -5, -5, -5, -2, -5, 6, -4, 17, -4, 30, -4, 48, -4, 68, -4, 92, -4, 118, -4, -107, -4, -76, -4, -40, -4, -2, -4, 38, -3, 81, -3, 126, -3, -82, -3, -33, -3, 19, -2, 71, -2, 126, -2, -74, -2, -18, -2, 40, -1, 98, -1, -99, -1, -40, -1, 19, 0, 78, 0, -118, 0, -61, 0, -4, 0, 54, 1, 109, 1, -90, 1, -38, 1, 14, 2, 64, 2, 112, 2, -99, 2, -54, 2, -14, 2, 26, 3, 63, 3, 96, 3, 127, 3, -102, 3, -76, 3, -55, 3, -37, 3, -22, 3, -9, 3, -2, 3, 2, 4, 4, 4, 4, 4, -2, 3, -11, 3, -24, 3, -39, 3, -57, 3, -79, 3, -104, 3, 124, 3, 93, 3, 59, 3, 22, 3, -18, 2, -59, 2, -103, 2, 107, 2, 59, 2, 10, 2, -44, 1, -97, 1, 104, 1, 47, 1, -9, 0, -67, 0, -125, 0, 72, 0, 13, 0, -46, -1, -105, -1, 91, -1, 33, -1, -24, -2, -82, -2, 119, -2, 66, -2, 13, -2, -38, -3, -86, -3, 122, -3, 77, -3, 34, -3, -6, -4, -44, -4, -79, -4, -110, -4, 115, -4, 89, -4, 65, -4, 46, -4, 29, -4, 16, -4, 5, -4, -2, -5, -5, -5, -5, -5, -1, -5, 6, -4, 16, -4, 29, -4, 45, -4, 66, -4, 89, -4, 116, -4, -111, -4, -79, -4, -44, -4, -6, -4, 35, -3, 78, -3, 123, -3, -86, -3, -37, -3, 14, -2, 67, -2, 121, -2, -80, -2, -23, -2, 35, -1, 92, -1, -105, -1, -46, -1, 13, 0, 73, 0, -124, 0, -67, 0, -8, 0, 49, 1, 105, 1, -96, 1, -41, 1, 9, 2, 60, 2, 109, 2, -102, 2, -58, 2, -16, 2, 24, 3, 59, 3, 93, 3, 123, 3, -104, 3, -79, 3, -57, 3, -38, 3, -23, 3, -11, 3, -3, 3, 3, 4, 4, 4, 3, 4, -1, 3, -11, 3, -22, 3, -37, 3, -56, 3, -77, 3, -102, 3, 126, 3, 96, 3, 62, 3, 25, 3, -13, 2, -55, 2, -99, 2, 112, 2, 63, 2, 13, 2, -39, 1, -91, 1, 109, 1, 53, 1, -4, 0, -61, 0, -120, 0, 77, 0, 18, 0, -41, -1, -100, -1, 97, -1, 40, -1, -19, -2, -75, -2, 125, -2, 70, -2, 18, -2, -33, -3, -84, -3, 126, -3, 81, -3, 38, -3, -4, -4, -41, -4, -76, -4, -109, -4, 117, -4, 91, -4, 67, -4, 48, -4, 29, -4, 17, -4, 6, -4, -1, -5, -5, -5, -5, -5, -2, -5, 6, -4, 14, -4, 29, -4, 44, -4, 64, -4, 87, -4, 113, -4, -114, -4, -82, -4, -47, -4, -9, -4, 31, -3, 73, -3, 118, -3, -90, -3, -42, -3, 9, -2, 61, -2, 116, -2, -85, -2, -28, -2, 29, -1, 87, -1, -110, -1, -51, -1, 8, 0, 67, 0, 126, 0, -72, 0, -13, 0, 44, 1, 101, 1, -101, 1, -47, 1, 4, 2, 55, 2, 104, 2, -106, 2, -62, 2, -20, 2, 20, 3, 56, 3, 90, 3, 121, 3, -106, 3, -80, 3, -59, 3, -40, 3, -24, 3, -12, 3, -2, 3, 2, 4, 4, 4, 3, 4, -1, 3, -10, 3, -22, 3, -36, 3, -54, 3, -76, 3, -100, 3, -127, 3, 99, 3, 65, 3, 29, 3, -10, 2, -51, 2, -94, 2, 116, 2, 68, 2, 18, 2, -33, 1, -86, 1, 115, 1, 59, 1, 2, 1, -56, 0, -116, 0, 83, 0, 23, 0, -36, -1, -95, -1, 102, -1, 44, -1, -14, -2, -71, -2, -126, -2, 76, -2, 23, -2, -29, -3, -78, -3, -125, -3, 85, -3, 41, -3, 2, -3, -37, -4, -72, -4, -106, -4, 120, -4, 94, -4, 70, -4, 49, -4, 32, -4, 18, -4, 8, -4, -1, -5, -5, -5, -6, -5, -2, -5, 4, -4, 14, -4, 27, -4, 43, -4, 62, -4, 84, -4, 111, -4, -117, -4, -86, -4, -50, -4, -13, -4, 27, -3, 70, -3, 115, -3, -95, -3, -47, -3, 5, -2, 58, -2, 111, -2, -90, -2, -34, -2, 24, -1, 83, -1, -115, -1, -55, -1, 2, 0, 62, 0, 122, 0, -76, 0, -18, 0, 39, 1, 94, 1, -106, 1, -52, 1, 0, 2, 52, 2, 99, 2, -111, 2, -66, 2, -25, 2, 15, 3, 53, 3, 87, 3, 120, 3, -109, 3, -83, 3, -61, 3, -41, 3, -25, 3, -13, 3, -4, 3, 3, 4, 5, 4, 2, 4, -1, 3, -10, 3, -20, 3, -34, 3, -52, 3, -72, 3, -97, 3, -124, 3, 101, 3 };
    std::vector<double> y(waveHdr.dwBytesRecorded);
    //cout << "x: " << x[0] << " y: " << y[0] << endl;
    // Создаем временный буфер для хранения исходных данных
    for (int i = 0; i < waveHdr.dwBytesRecorded; ++i) {
        //cout << "waveHdr.lpData[i] " << double(waveHdr.lpData[i]) << ", ";
        x[i] = waveHdr.lpData[i];
        //cout << double(waveHdr.lpData[i]) << ", ";
        //cout << "x[i] " << x[i] << endl;
    }

    // Применяем фильтр Баттерворта к каждому сэмплу
    for (int n = 0; n < waveHdr.dwBytesRecorded; n++) {
        //cout << "y[n] 1 : " << y[n] << "    " << endl;
        //cout << y[9] << endl;ьтр только к данным после первых 8 элементов
        for (int q = 0; q < bCoeffs.size(); ++q) {
            int k = q * 2;
            if (n - k < 0)
            {
                y[n] += bCoeffs[q] * 0;
            }
            else
            {
                y[n] += bCoeffs[q] * x[n - k];
            }
        }
    }
    for (int i = 0; i < waveHdr.dwBytesRecorded; ++i) {
        //cout << ", " << y[i];
        //cout << "waveHdr.lpData(1): " << double(waveHdr.lpData[i]) << endl;
        waveHdr.lpData[i] = y[i];
        //cout << "waveHdr.lpData(2): " << double(waveHdr.lpData[i]) << endl;
    }
    //Sleep(3000);
}

//void applyButterworthFilter(WAVEHDR& waveHdr, const std::vector<double>& bCoeffs, const std::vector<double>& aCoeffs) {
//    std::vector<double> input(waveHdr.dwBytesRecorded);
//    std::vector<double> output(waveHdr.dwBytesRecorded);
//    //cout << "input: " << input[0] << " output: " << output[0] << endl;
//    // Создаем временный буфер для хранения исходных данных
//    for (int i = 0; i < waveHdr.dwBytesRecorded; ++i) {
//        //cout << "waveHdr.lpData[i] " << double(waveHdr.lpData[i]) << "    ";
//        input[i] = waveHdr.lpData[i];
//        //cout << "input[i] " << input[i] << endl;
//    }
//
//    // Применяем фильтр Баттерворта к каждому сэмплу
//    for (int n = 0; n < waveHdr.dwBytesRecorded; n++) {
//        //cout << "output[n] 1 : " << output[n] << "    " << endl;
//        //cout << output[9] << endl;
//        if (n >= 8) {
//            // Применяем фильтр только к данным после первых 8 элементов
//            output[n] =
//                bCoeffs[0] * input[n - 0] +
//                bCoeffs[1] * input[n - 1] +
//                bCoeffs[2] * input[n - 2] +
//                bCoeffs[3] * input[n - 3] +
//                bCoeffs[4] * input[n - 4] +
//                bCoeffs[5] * input[n - 5] +
//                bCoeffs[6] * input[n - 6] +
//                bCoeffs[7] * input[n - 7] +
//                bCoeffs[8] * input[n - 8] -
//                aCoeffs[1] * output[n - 1] -
//                aCoeffs[2] * output[n - 2] -
//                aCoeffs[3] * output[n - 3] -
//                aCoeffs[4] * output[n - 4] -
//                aCoeffs[5] * output[n - 5] -
//                aCoeffs[6] * output[n - 6] -
//                aCoeffs[7] * output[n - 7] -
//                aCoeffs[8] * output[n - 8];
//        }
//        else {
//            if (n == 0)
//                output[n] = bCoeffs[0] * input[n - 0];
//            else if (n == 1)
//                output[n] =
//                bCoeffs[0] * input[n - 0] +
//                bCoeffs[1] * input[n - 1] -
//                aCoeffs[1] * output[n - 1];
//            else if (n == 2) {
//                output[n] =
//                    bCoeffs[0] * input[n - 0] +
//                    bCoeffs[1] * input[n - 1] +
//                    bCoeffs[2] * input[n - 2] -
//                    aCoeffs[1] * output[n - 1] -
//                    aCoeffs[2] * output[n - 2];
//            }
//            else if (n == 3) {
//                output[n] =
//                    bCoeffs[0] * input[n - 0] +
//                    bCoeffs[1] * input[n - 1] +
//                    bCoeffs[2] * input[n - 2] +
//                    bCoeffs[3] * input[n - 3] -
//                    aCoeffs[1] * output[n - 1] -
//                    aCoeffs[2] * output[n - 2] -
//                    aCoeffs[3] * output[n - 3];
//            }
//            else if (n == 4) {
//                output[n] =
//                    bCoeffs[0] * input[n - 0] +
//                    bCoeffs[1] * input[n - 1] +
//                    bCoeffs[2] * input[n - 2] +
//                    bCoeffs[3] * input[n - 3] +
//                    bCoeffs[4] * input[n - 4] -
//                    aCoeffs[1] * output[n - 1] -
//                    aCoeffs[2] * output[n - 2] -
//                    aCoeffs[3] * output[n - 3] -
//                    aCoeffs[4] * output[n - 4];
//            }
//            else if (n == 5) {
//                output[n] =
//                    bCoeffs[0] * input[n - 0] +
//                    bCoeffs[1] * input[n - 1] +
//                    bCoeffs[2] * input[n - 2] +
//                    bCoeffs[3] * input[n - 3] +
//                    bCoeffs[4] * input[n - 4] +
//                    bCoeffs[5] * input[n - 5] -
//                    aCoeffs[1] * output[n - 1] -
//                    aCoeffs[2] * output[n - 2] -
//                    aCoeffs[3] * output[n - 3] -
//                    aCoeffs[4] * output[n - 4] -
//                    aCoeffs[5] * output[n - 5];
//            }
//            else if (n == 6) {
//                output[n] =
//                    bCoeffs[0] * input[n - 0] +
//                    bCoeffs[1] * input[n - 1] +
//                    bCoeffs[2] * input[n - 2] +
//                    bCoeffs[3] * input[n - 3] +
//                    bCoeffs[4] * input[n - 4] +
//                    bCoeffs[5] * input[n - 5] +
//                    bCoeffs[6] * input[n - 6] -
//                    aCoeffs[1] * output[n - 1] -
//                    aCoeffs[2] * output[n - 2] -
//                    aCoeffs[3] * output[n - 3] -
//                    aCoeffs[4] * output[n - 4] -
//                    aCoeffs[5] * output[n - 5] -
//                    aCoeffs[6] * output[n - 6];
//            }
//            else if (n == 7) {
//                output[n] =
//                    bCoeffs[0] * input[n - 0] +
//                    bCoeffs[1] * input[n - 1] +
//                    bCoeffs[2] * input[n - 2] +
//                    bCoeffs[3] * input[n - 3] +
//                    bCoeffs[4] * input[n - 4] +
//                    bCoeffs[5] * input[n - 5] +
//                    bCoeffs[6] * input[n - 6] +
//                    bCoeffs[7] * input[n - 7] -
//                    aCoeffs[1] * output[n - 1] -
//                    aCoeffs[2] * output[n - 2] -
//                    aCoeffs[3] * output[n - 3] -
//                    aCoeffs[4] * output[n - 4] -
//                    aCoeffs[5] * output[n - 5] -
//                    aCoeffs[6] * output[n - 6] -
//                    aCoeffs[7] * output[n - 7];
//            }
//        }
//        //cout << "output[" << n << "]: " << output[n] << endl;
//    }
//    for (int i = 0; i < waveHdr.dwBytesRecorded; ++i) {
//        //cout << "Output: " << output[i] << endl;
//        //cout << "waveHdr.lpData(1): " << double(waveHdr.lpData[i]) << endl;
//        waveHdr.lpData[i] = output[i];
//        //cout << "waveHdr.lpData(2): " << double(waveHdr.lpData[i]) << endl;
//    }
//}